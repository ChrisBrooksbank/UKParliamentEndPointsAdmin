@page "/endpoints"
@using Newtonsoft.Json
@inject IHttpClientFactory HttpClientFactory
@attribute [StreamRendering]

<PageTitle>UK Parliamentary EndPoints</PageTitle>

<p>Browsing endpoints from <a target="_blank" href="https://ukparliamentendpoints-services.azurewebsites.net/swagger/index.html">endpoints API</a>.</p>

@if (_endpoints == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a class="btn btn-secondary" target="_blank" href="https://ukparlyendpointsfuncapp.azurewebsites.net/api/PingAllHttp?code=vaj9gh90rC5CsRDzy-ZYzHa5EmnKsTkuYrzF2kU5O_YEAzFun5YxnA%3D%3D">Ping All</a>
    
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Description</th>
                <th>Ping</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var endpoint in _endpoints)
            {
                <tr>
                    <td><a href="@endpoint.uri" target="_blank">@endpoint.id</a></td>
                    <td>@endpoint.description</td>
                    <td>
                        @(endpoint.pingTimeStamp.HasValue ? $"{GetFriendlyElapsedTime(endpoint.pingTimeStamp.Value)}" : "")
                        - @endpoint.pingStatus
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private Endpoint[]? _endpoints;

    protected override async Task OnInitializedAsync()
    {
        var httpClient = HttpClientFactory.CreateClient();
        var endpointsUrl = "https://ukparliamentendpoints-services.azurewebsites.net/ParliamentEndpoint/endpoints";
        string endpointsJson = await httpClient.GetStringAsync(endpointsUrl);
        _endpoints = JsonConvert.DeserializeObject<List<Endpoint>>(endpointsJson).ToArray();
    }

    private class Endpoint
    {
        public string? id { get; set; }
        public string? uri { get; set; }
        public string? description { get; set; }
        public string? pingStatus { get; set; }
        public DateTime? pingTimeStamp { get; set; }
    }

    string GetFriendlyElapsedTime(DateTime dateTime)
    {
        var elapsed = DateTime.Now - dateTime;
        if (elapsed.TotalHours >= 2)
        {
            return $"{elapsed.TotalHours:0} hours ago";
        }
        else
        {
            return $"{elapsed.TotalMinutes:0} minutes ago";
        }
    }
}
